// Code generated by protoc-gen-go.
// source: coterie_message.proto
// DO NOT EDIT!

/*
Package coterie is a generated protocol buffer package.

It is generated from these files:
	coterie_message.proto

It has these top-level messages:
	CoterieMsg
	CloseConnectionMsg
	Filter
	InsertEntryMsg
	InsertRecordMsg
	QueryMsg
	Record
	InsertRecordsMsg
	ResultMsg
*/
package coterie

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CoterieMsg_Type int32

const (
	CoterieMsg_CLOSE_CONNECTION CoterieMsg_Type = 0
	CoterieMsg_INSERT_ENTRY     CoterieMsg_Type = 1
	CoterieMsg_INSERT_RECORD    CoterieMsg_Type = 2
	CoterieMsg_INSERT_RECORDS   CoterieMsg_Type = 3
	CoterieMsg_QUERY            CoterieMsg_Type = 4
	CoterieMsg_RESULT           CoterieMsg_Type = 5
)

var CoterieMsg_Type_name = map[int32]string{
	0: "CLOSE_CONNECTION",
	1: "INSERT_ENTRY",
	2: "INSERT_RECORD",
	3: "INSERT_RECORDS",
	4: "QUERY",
	5: "RESULT",
}
var CoterieMsg_Type_value = map[string]int32{
	"CLOSE_CONNECTION": 0,
	"INSERT_ENTRY":     1,
	"INSERT_RECORD":    2,
	"INSERT_RECORDS":   3,
	"QUERY":            4,
	"RESULT":           5,
}

func (x CoterieMsg_Type) String() string {
	return proto.EnumName(CoterieMsg_Type_name, int32(x))
}
func (CoterieMsg_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type CoterieMsg struct {
	Type               CoterieMsg_Type     `protobuf:"varint,1,opt,name=type,enum=coterie.CoterieMsg_Type" json:"type,omitempty"`
	CloseConnectionMsg *CloseConnectionMsg `protobuf:"bytes,2,opt,name=close_connection_msg" json:"close_connection_msg,omitempty"`
	InsertEntryMsg     *InsertEntryMsg     `protobuf:"bytes,3,opt,name=insert_entry_msg" json:"insert_entry_msg,omitempty"`
	InsertRecordMsg    *InsertRecordMsg    `protobuf:"bytes,4,opt,name=insert_record_msg" json:"insert_record_msg,omitempty"`
	QueryMsg           *QueryMsg           `protobuf:"bytes,5,opt,name=query_msg" json:"query_msg,omitempty"`
	InsertRecordsMsg   *InsertRecordsMsg   `protobuf:"bytes,6,opt,name=insert_records_msg" json:"insert_records_msg,omitempty"`
	ResultMsg          *ResultMsg          `protobuf:"bytes,7,opt,name=result_msg" json:"result_msg,omitempty"`
}

func (m *CoterieMsg) Reset()                    { *m = CoterieMsg{} }
func (m *CoterieMsg) String() string            { return proto.CompactTextString(m) }
func (*CoterieMsg) ProtoMessage()               {}
func (*CoterieMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CoterieMsg) GetCloseConnectionMsg() *CloseConnectionMsg {
	if m != nil {
		return m.CloseConnectionMsg
	}
	return nil
}

func (m *CoterieMsg) GetInsertEntryMsg() *InsertEntryMsg {
	if m != nil {
		return m.InsertEntryMsg
	}
	return nil
}

func (m *CoterieMsg) GetInsertRecordMsg() *InsertRecordMsg {
	if m != nil {
		return m.InsertRecordMsg
	}
	return nil
}

func (m *CoterieMsg) GetQueryMsg() *QueryMsg {
	if m != nil {
		return m.QueryMsg
	}
	return nil
}

func (m *CoterieMsg) GetInsertRecordsMsg() *InsertRecordsMsg {
	if m != nil {
		return m.InsertRecordsMsg
	}
	return nil
}

func (m *CoterieMsg) GetResultMsg() *ResultMsg {
	if m != nil {
		return m.ResultMsg
	}
	return nil
}

type CloseConnectionMsg struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *CloseConnectionMsg) Reset()                    { *m = CloseConnectionMsg{} }
func (m *CloseConnectionMsg) String() string            { return proto.CompactTextString(m) }
func (*CloseConnectionMsg) ProtoMessage()               {}
func (*CloseConnectionMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Filter struct {
	FieldName string   `protobuf:"bytes,1,opt,name=field_name" json:"field_name,omitempty"`
	Type      string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Arguments []string `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
	Value     string   `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InsertEntryMsg struct {
	Token uint64 `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *InsertEntryMsg) Reset()                    { *m = InsertEntryMsg{} }
func (m *InsertEntryMsg) String() string            { return proto.CompactTextString(m) }
func (*InsertEntryMsg) ProtoMessage()               {}
func (*InsertEntryMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type InsertRecordMsg struct {
	Token  uint64  `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	Record *Record `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
}

func (m *InsertRecordMsg) Reset()                    { *m = InsertRecordMsg{} }
func (m *InsertRecordMsg) String() string            { return proto.CompactTextString(m) }
func (*InsertRecordMsg) ProtoMessage()               {}
func (*InsertRecordMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InsertRecordMsg) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type QueryMsg struct {
	FieldNames []string  `protobuf:"bytes,1,rep,name=field_names" json:"field_names,omitempty"`
	Filters    []*Filter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *QueryMsg) Reset()                    { *m = QueryMsg{} }
func (m *QueryMsg) String() string            { return proto.CompactTextString(m) }
func (*QueryMsg) ProtoMessage()               {}
func (*QueryMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryMsg) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Record struct {
	Entries map[string]string `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Record) GetEntries() map[string]string {
	if m != nil {
		return m.Entries
	}
	return nil
}

type InsertRecordsMsg struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *InsertRecordsMsg) Reset()                    { *m = InsertRecordsMsg{} }
func (m *InsertRecordsMsg) String() string            { return proto.CompactTextString(m) }
func (*InsertRecordsMsg) ProtoMessage()               {}
func (*InsertRecordsMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InsertRecordsMsg) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type ResultMsg struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *ResultMsg) Reset()                    { *m = ResultMsg{} }
func (m *ResultMsg) String() string            { return proto.CompactTextString(m) }
func (*ResultMsg) ProtoMessage()               {}
func (*ResultMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*CoterieMsg)(nil), "coterie.CoterieMsg")
	proto.RegisterType((*CloseConnectionMsg)(nil), "coterie.CloseConnectionMsg")
	proto.RegisterType((*Filter)(nil), "coterie.Filter")
	proto.RegisterType((*InsertEntryMsg)(nil), "coterie.InsertEntryMsg")
	proto.RegisterType((*InsertRecordMsg)(nil), "coterie.InsertRecordMsg")
	proto.RegisterType((*QueryMsg)(nil), "coterie.QueryMsg")
	proto.RegisterType((*Record)(nil), "coterie.Record")
	proto.RegisterType((*InsertRecordsMsg)(nil), "coterie.InsertRecordsMsg")
	proto.RegisterType((*ResultMsg)(nil), "coterie.ResultMsg")
	proto.RegisterEnum("coterie.CoterieMsg_Type", CoterieMsg_Type_name, CoterieMsg_Type_value)
}

var fileDescriptor0 = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x94, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x86, 0xc9, 0x47, 0xdb, 0xe5, 0x6c, 0xac, 0xe9, 0xd1, 0x80, 0x02, 0x43, 0xa0, 0xdc, 0x00,
	0xd2, 0x14, 0x89, 0x22, 0x01, 0x9a, 0xc4, 0x05, 0x64, 0x01, 0x2a, 0x6d, 0x29, 0x73, 0x3b, 0x24,
	0xae, 0xa2, 0x92, 0x79, 0x55, 0xb4, 0x34, 0xd9, 0xe2, 0x14, 0xa9, 0x12, 0x3f, 0x89, 0x1f, 0x89,
	0xed, 0x38, 0x69, 0xd3, 0x8e, 0x3b, 0xfb, 0x7c, 0x3c, 0x3e, 0x79, 0xfd, 0xc6, 0xf0, 0x20, 0xca,
	0x0a, 0x9a, 0xc7, 0x34, 0x9c, 0x53, 0xc6, 0xa6, 0x33, 0xea, 0xde, 0xe4, 0x59, 0x91, 0x61, 0x47,
	0x85, 0x9d, 0xbf, 0x26, 0x80, 0x57, 0xae, 0xcf, 0xd8, 0x0c, 0x8f, 0xc0, 0x2c, 0x96, 0x37, 0xb4,
	0xaf, 0xbd, 0xd0, 0x5e, 0xed, 0x0f, 0xfa, 0xae, 0x2a, 0x73, 0x57, 0x25, 0xee, 0x84, 0xe7, 0x89,
	0xac, 0xc2, 0x33, 0x38, 0x88, 0x92, 0x8c, 0xd1, 0x30, 0xca, 0xd2, 0x94, 0x46, 0x45, 0x9c, 0xa5,
	0xe1, 0x9c, 0xcd, 0xfa, 0x3a, 0xef, 0xde, 0x1d, 0x3c, 0x5d, 0x75, 0x8b, 0x22, 0xaf, 0xae, 0xe1,
	0x14, 0x82, 0xd1, 0x56, 0x0c, 0x3f, 0x81, 0x1d, 0xa7, 0x8c, 0xe6, 0x45, 0x48, 0xd3, 0x22, 0x5f,
	0x4a, 0x94, 0x21, 0x51, 0x8f, 0x6a, 0xd4, 0x50, 0x16, 0xf8, 0x22, 0x2f, 0x30, 0xfb, 0x71, 0x63,
	0x8f, 0x27, 0xd0, 0x53, 0x88, 0x9c, 0x46, 0x59, 0x7e, 0x29, 0x19, 0xa6, 0x64, 0xf4, 0x37, 0x18,
	0x44, 0x16, 0x08, 0x48, 0x37, 0x6e, 0x06, 0xd0, 0x05, 0xeb, 0x76, 0x41, 0xd5, 0x04, 0x2d, 0xd9,
	0xdd, 0xab, 0xbb, 0xcf, 0x45, 0x46, 0xb4, 0xed, 0xdc, 0xaa, 0x15, 0x7e, 0x05, 0x6c, 0x9c, 0xca,
	0x64, 0x63, 0x5b, 0x36, 0x3e, 0xbe, 0xf3, 0x58, 0x26, 0x00, 0x76, 0xbc, 0x11, 0xc1, 0x37, 0x00,
	0x39, 0x65, 0x8b, 0xa4, 0x90, 0x80, 0x8e, 0x04, 0x60, 0x0d, 0x20, 0x32, 0x25, 0x3a, 0xad, 0xbc,
	0x5a, 0x3a, 0x09, 0x98, 0xe2, 0x46, 0xf0, 0x00, 0x6c, 0xef, 0x74, 0x34, 0xf6, 0x43, 0x6f, 0x14,
	0x04, 0xbe, 0x37, 0x19, 0x8e, 0x02, 0xfb, 0x1e, 0xda, 0xb0, 0x37, 0x0c, 0xc6, 0x3e, 0x99, 0x84,
	0x7e, 0x30, 0x21, 0x3f, 0x6d, 0x0d, 0x7b, 0x70, 0x5f, 0x45, 0x88, 0xef, 0x8d, 0xc8, 0x89, 0xad,
	0x23, 0xc2, 0x7e, 0x23, 0x34, 0xb6, 0x0d, 0xb4, 0xa0, 0x75, 0x7e, 0xe1, 0xf3, 0x0e, 0x13, 0x01,
	0xda, 0xc4, 0x1f, 0x5f, 0x9c, 0x4e, 0xec, 0x96, 0x73, 0x04, 0xb8, 0x7d, 0x99, 0xf8, 0x10, 0xda,
	0x39, 0x9d, 0xb2, 0x2c, 0x95, 0xbe, 0xb1, 0x88, 0xda, 0x39, 0x19, 0xb4, 0xbf, 0xc4, 0x09, 0x1f,
	0x1e, 0x9f, 0x01, 0x5c, 0xc5, 0x34, 0xb9, 0x0c, 0xd3, 0xe9, 0x9c, 0xaa, 0x2a, 0x4b, 0x46, 0x02,
	0x1e, 0xe0, 0x13, 0x94, 0xb6, 0xd3, 0x65, 0xa2, 0x34, 0xd7, 0x21, 0x58, 0xd3, 0x7c, 0xb6, 0x98,
	0x73, 0x2f, 0x30, 0x6e, 0x03, 0x43, 0x74, 0xd4, 0x01, 0xfe, 0xb9, 0xad, 0xdf, 0xd3, 0x64, 0x41,
	0xe5, 0xe5, 0x5a, 0xa4, 0xdc, 0x38, 0x01, 0xff, 0x92, 0xa6, 0x21, 0x78, 0x5d, 0x91, 0x5d, 0xd3,
	0x72, 0x32, 0x93, 0x94, 0x1b, 0x2e, 0x8b, 0x71, 0x4d, 0x97, 0xea, 0x38, 0xb1, 0x5c, 0xf1, 0x8c,
	0x75, 0xde, 0x77, 0xe8, 0x6e, 0x98, 0xe5, 0x3f, 0xc0, 0x97, 0x42, 0x01, 0x51, 0xa2, 0xbc, 0xdf,
	0x5d, 0xbb, 0x34, 0x11, 0x26, 0x2a, 0xed, 0xfc, 0x80, 0x9d, 0xca, 0x40, 0xf8, 0x1c, 0x76, 0x57,
	0xa2, 0x30, 0x0e, 0x14, 0xdf, 0x08, 0xb5, 0x2a, 0x0c, 0x5f, 0x43, 0xe7, 0x4a, 0xea, 0xc7, 0x38,
	0xd6, 0x68, 0x60, 0x4b, 0x5d, 0x49, 0x95, 0x77, 0xfe, 0xf0, 0x4b, 0x92, 0x27, 0xe0, 0x3b, 0xe8,
	0x88, 0xdf, 0x27, 0x56, 0xc4, 0xdd, 0xc1, 0xe1, 0xc6, 0x2c, 0xae, 0x5f, 0xa6, 0xa5, 0x46, 0xa4,
	0x2a, 0x7e, 0x72, 0x0c, 0x7b, 0xeb, 0x89, 0x4a, 0x23, 0xed, 0x0e, 0x8d, 0xf4, 0x35, 0x8d, 0x8e,
	0xf5, 0x0f, 0x9a, 0xf3, 0x11, 0xec, 0x4d, 0x77, 0x8b, 0xe1, 0xd5, 0xdf, 0xa0, 0xe6, 0xd8, 0xd2,
	0xa4, 0xca, 0x3b, 0xef, 0xc1, 0xaa, 0xbd, 0x8d, 0x7d, 0xe8, 0xb0, 0x45, 0x14, 0xf1, 0xe7, 0x4a,
	0x9e, 0xbd, 0x43, 0xaa, 0xad, 0x98, 0xa8, 0x7a, 0x5d, 0xf8, 0x44, 0x7c, 0xf9, 0x59, 0xff, 0xa6,
	0xfd, 0x6a, 0xcb, 0x17, 0xed, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x96, 0xd4, 0xa1,
	0xea, 0x04, 0x00, 0x00,
}
